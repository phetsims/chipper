// Copyright 2002-2015 University of Colorado Boulder
// @author Sam Reid
// Note: IDEA wants to shrink all the line breaks in the file, so I'm using // to simulate line breakes where desired
{
  // Use all of the default rules from eslint, unless overriden below.
  "extends": "eslint:recommended",
  // The new rules, overrides, etc.
  "rules": {
    // 
    // Permit console.log statements (we have a lot of them)
    // TODO: Find a way to make sure no console.log statements make it to production.  Can use the no-console rule
    // but we want to be able to use console.log during development. 
    "no-console": 0,
    // 
    // specify whether backticks, double or single quotes should be used (fixable)
    "quotes": [
      2,
      "single"
    ],
    //
    // require or disallow use of semicolons instead of ASI (fixable)
    "semi": [
      2,
      "always"
    ],
    //
    // Custom rule for checking the copyright.
    "copyright": 2,
    //
    // disallow declaration of variables that are not used in the code (recommended)
    // Overriden to allow unused args
    "no-unused-vars": [
      2,
      {
        "vars": "all",
        "args": "none"
      }
    ],
    //    "require-jsdoc": [
    //      2
    //    ],
    //
    // require the use of === and !== (fixable)
    "eqeqeq": 2,
    //
    // specify curly brace conventions for all control statements
    "curly": 2,
    //    "no-use-before-define": [
    //      2
    //    ],
    // TODO: This may be good to have
    //    "new-cap": [
    //      2
    //    ],
    //
    // disallow use of arguments.caller or arguments.callee
    "no-caller": 2,
    //
    // disallow use of the new operator when not part of an assignment or comparison
    "no-new": 2,
    //
    // controls location of Use Strict Directives
    "strict": 2,
    //
    // Avoid code that looks like two expressions but is actually one
    "no-unexpected-multiline": 2,
    //
    // encourages use of dot notation whenever possible
    "dot-notation": 2,
    //
    // disallow adding to native types
    "no-extend-native": 2,
    //
    // disallow use of assignment in return statement
    "no-return-assign": 2,
    // 
    // disallow comparisons where both sides are exactly the same
    "no-self-compare": 2,
    //
    // disallow unnecessary .call() and .apply()
    // TODO: Under discussion in https://github.com/phetsims/scenery-phet/issues/193
    //    "no-useless-call": 2,
    //
    // disallow use of undefined when initializing variables
    "no-undef-init": 2,
    //
    // 
    "require-statement-match": 2
    //
    // disallow trailing whitespace at the end of lines (fixable)
    //    "no-trailing-spaces": 2,
    //
    // USE THIS DURING CODE REVIEW
    // specify the maximum length of a line in your program
    //    "max-len": [
    //      2,
    //      // this many columns per line
    //      120,
    //      // tab counts for this many spaces
    //      4
    //    ]
  },
  "env": {
    "browser": true
  },
  "globals": {
    // writable globals ---------------------------------
    "process": true,
    // allow assertions
    "assert": true,
    // allow slow assertions
    "assertSlow": true,
    // scenery logging levels
    "sceneryLog": true,
    // scenery logging levels
    "sceneryLayerLog": true,
    // scenery logging levels
    "sceneryEventLog": true,
    // scenery accessibility levels
    "sceneryAccessibilityLog": true,
    // for tracking object allocations, see phet-core's phetAllocation
    "phetAllocation": true,
    // we actually polyfill this, so allow it to be set
    "Float32Array": true,
    "phet": true,
    "together": true,
    // read-only globals ---------------------------------

    // Missing from globals 8.x, see https://github.com/phetsims/phetcommon/issues/65
    "URLSearchParams": false,
    // require.js
    "define": false,
    // require.js
    "require": false,
    "Uint16Array": false,
    "Uint32Array": false,
    // allow ajax requests directly
    "XMLHttpRequest": false,
    "document": false,
    "window": false,
    "console": false,
    "HTMLImageElement": false,
    "HTMLCanvasElement": false,
    // backbone is currently run outside of requirejs
    "Backbone": false,
    // as used in Gruntfile.js
    "module": false,
    // jQuery
    "$": false,
    // underscore, lodash
    "_": true,
    "clearTimeout": false,
    // DOM.js
    "Image": false,
    // DOM.js
    "Blob": false,
    "canvg": false,
    //socket.io
    "io": false,
    //sole/tween.js
    "TWEEN": false,
    //For Mobile Safari detection, see http"://stackoverflow.com/questions/3007480/determine-if-user-navigated-from-mobile-safari
    "navigator": false,
    //for web audio
    "Howl": false,
    //for full screen
    "ActiveXObject": false,
    //For Box2D physics engine
    "Box2D": false,
    //For @mrdoob's stats + frame rate readout component
    "Stats": false,
    //For poly2tri triangulation library
    "poly2tri": false,
    //For three.js 3d things
    "THREE": false,
    // for WebSocket communication
    "WebSocket": false,
    // for khronos webgl-debug.js debugging utilities
    "WebGLDebugUtils": false,
    // for CODAP or other Concord communication
    "iframePhone": false,
    "PIXI": false,
    "togetherEvents": false,
    // for linting Node.js code
    "global": false,
    // for generating diffs in together.js
    "jsondiffpatch": false,
    //for debugging on ipad
    "alert": false,
    //Numeric library used in energy skate park
    "numeric": false,
    //For setting location.href to save to local file, see http"://stackoverflow.com/questions/2897619/using-html5-javascript-to-generate-and-save-a-file
    "location": false,
    //For file loading, see SaveLoadNode in Energy Skate Park": Basics
    "FileReader": false,
    "Buffer": false
  }
}