/**
 * Shared defaults for tsconfig files.
 *
 * PLEASE: DO NOT add "files" or "include" or "exclude" in this file without serious investigation. It will likely
 * break defaults all the way down the hierarchy.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

// @formatter:off
{
  // TODO: This list is quite old, can we look through a list of current options to see what we should add for node vs browser vs both? https://github.com/phetsims/chipper/issues/1463
  // TODO: Regenerate tsc --init to get a more complete and better structuring for these options, see https://github.com/phetsims/chipper/issues/1463
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Projects */
    "incremental": true,                         /* Enable incremental compilation */
    "composite": true,                             /* Enable project compilation (project references) */
    // "tsBuildInfoFile": "./",                     /* Specify file to store incremental compilation information */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "ES2020",                          /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                   /* Specify library files to be included in the compilation. */
    "jsx": "react",                                /* Specify JSX code generation: 'preserve', 'react-native', 'react', 'react-jsx' or 'react-jsxdev'. */
    "rootDir": "../../../",                               /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
    // "rootDir": "./",                             /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */

    /* Modules */
    "module": "ES2020",                             /* Specify what module code is generated. */
    // "moduleResolution": "node",                  /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                             /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                 /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                              /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                             /* List of folders to include type definitions from. */
    // "types": [],                                 /* Type declaration files to be included in compilation. */
    "allowSyntheticDefaultImports": true,        /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    // "esModuleInterop": true,                     /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,                    /* Do not resolve the real path of symlinks. */
    "allowUmdGlobalAccess": true,                /* Allow accessing UMD globals from modules. */

    /* JavaScript Support */
    "allowJs": true,                               /* Allow javascript files to be compiled. */
    "checkJs": false,                              /* Report errors in .js files. */

    /* Emit */
    "declaration": true,                            /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                      /* Generates a sourcemap for each corresponding '.d.ts' file. */
    "emitDeclarationOnly": true,                    /* But not js output, because we use babel ourselves */
    // "removeComments": true,                      /* Do not emit comments to output. */
    // "sourceRoot": "",                            /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                               /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                     /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                       /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */
    "noEmit": false,                                /* Emit outputs. */
    "sourceMap": false,                             /* Generates corresponding '.map' file. */
    "outDir": "../../../chipper/dist/tsc/outDir",         /* Redirect output structure to the directory. */
    // "importHelpers": true,                       /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,                  /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
     "isolatedModules": true,                     /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    "strict": true,                              /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                       /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                    /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                 /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                 /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,        /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                      /* Enable error reporting when 'this' is given the type 'any'. */
    // "alwaysStrict": true,                        /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                      /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                  /* Raise an error when a function parameter isn't read. */
    "noImplicitReturns": true,                      /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,          /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,            /* Add 'undefined' to a type when accessed using an index. */
    "noImplicitOverride": true,                     /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,  /* Enforces using indexed accessors for keys declared using an indexed type. */

    /* Experimental Options */
    // "experimentalDecorators": true,              /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,               /* Enables experimental support for emitting type metadata for decorators. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true,                           /* Skip type checking of declaration files. */
    "forceConsistentCasingInFileNames": true,        /* Disallow inconsistently-cased references to the same file. */
    // TODO: should this only be on for node code? https://github.com/phetsims/chipper/issues/1463
    "allowImportingTsExtensions": false              /* Allow importing .ts files without specifying the extension. */
  }
}