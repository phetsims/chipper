// Copyright 2025, University of Colorado Boulder

/**
 * FluentPattern is the type generated by generateFluentTypes for the entries in a SimFluent.ts file that require inputs
 * for a pattern.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import ReadOnlyProperty from '../../../axon/js/ReadOnlyProperty.js';
import TReadOnlyProperty, { isTReadOnlyProperty } from '../../../axon/js/TReadOnlyProperty.js';
import { FluentBundle } from '../../../chipper/js/browser-and-node/FluentLibrary.js';
import chipper from './chipper.js';
import FluentUtils from './FluentUtils.js';

export default class FluentPattern<T extends Record<string, unknown>> {
  public constructor(
    //
    private readonly bundleProperty: ReadOnlyProperty<FluentBundle>,
    //
    // The string key, where nesting is indicated by underscores (since that is compatible with Fluent syntax)
    // such as a11y_summary_playAreaSummaryIntro
    public readonly key: string ) { }

  public format( args: T ): string {
    const bundle = this.bundleProperty.value;

    const newArgs = FluentUtils.handleFluentArgs( args );

    const message = bundle.getMessage( this.key );

    const errors: Array<Error> = [];
    const result = bundle.formatPattern( message!.value!, newArgs, errors );
    assert && assert( errors.length === 0, `Fluent errors found when formatting message: ${errors}` );
    return result;
  }

  /**
   * Creates a StringProperty that will update when the bundle changes or any of the args change.
   * Clients are responsible for disposing of the StringProperty, if it is short-lived.
   *
   * @param args - The arguments to be passed to the Fluent pattern, like MembraneTransportFluent.myPattern.format({ numberOfSolutes: model.numberOfSolutesProperty});
   */
  public createProperty( args: T ): TReadOnlyProperty<string> {
    const dependencies = [ this.bundleProperty, ...Object.values( args ).filter( isTReadOnlyProperty ) ];
    return DerivedProperty.deriveAny( dependencies, () => this.format( args ) );
  }
}

chipper.register( 'FluentPattern', FluentPattern );