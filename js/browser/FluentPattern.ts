// Copyright 2025, University of Colorado Boulder

/**
 * FluentPattern is the type generated by generateFluentTypes for the entries in a SimFluent.ts file that require inputs
 * for a pattern.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import DerivedStringProperty from '../../../axon/js/DerivedStringProperty.js';
import ReadOnlyProperty from '../../../axon/js/ReadOnlyProperty.js';
import TReadOnlyProperty, { isTReadOnlyProperty } from '../../../axon/js/TReadOnlyProperty.js';
import { FluentBundle } from '../../../chipper/js/browser-and-node/FluentLibrary.js';
import EnumerationValue from '../../../phet-core/js/EnumerationValue.js';
import IntentionalAny from '../../../phet-core/js/types/IntentionalAny.js';
import PhetioObject from '../../../tandem/js/PhetioObject.js';
import chipper from './chipper.js';
import FluentUtils from './FluentUtils.js';

// A type for simple variables that can be used in Fluent messages. While strings and numbers are handled natively,
// booleans and EnumerationValues are handled by FluentUtils.handleFluentArgs.
type VariableType = string | number | boolean | EnumerationValue;
export type FluentVariable = VariableType | TReadOnlyProperty<VariableType>;

export default class FluentPattern<T extends Record<string, unknown>> {

  /**
   *
   * @param bundleProperty
   * @param key - The string key, where nesting is indicated by underscores (since that is compatible with Fluent syntax)
   *              such as a11y_summary_playAreaSummaryIntro
   * @param targetProperty - The target property that this FluentConstant will be associated with, solely for phet-io studio autoselect, see Text and RichText.
   *                       - this will be undefined in a built simulation when the corresponding string is unused.
   * @param args - Shows the arguments that must be passed in to evaluate the pattern.
   */
  public constructor(
    private readonly bundleProperty: ReadOnlyProperty<FluentBundle>,
    public readonly key: string,
    public readonly targetProperty: PhetioObject | undefined,
    public readonly args: Record<string, IntentionalAny>[]
  ) { }

  public format( args: T ): string {
    const bundle = this.bundleProperty.value;

    const newArgs = FluentUtils.handleFluentArgs( args );

    const message = bundle.getMessage( this.key );

    const errors: Array<Error> = [];
    const result = bundle.formatPattern( message!.value!, newArgs, errors );
    assert && assert( errors.length === 0, `Fluent errors found when formatting message: ${errors}` );
    return result;
  }

  /**
   * Creates a StringProperty that will update when the bundle changes or any of the args change.
   * Clients are responsible for disposing of the StringProperty, if it is short-lived.
   *
   * @param args - The arguments to be passed to the Fluent pattern, like MembraneTransportFluent.myPattern.format({ numberOfSolutes: model.numberOfSolutesProperty});
   */
  public createProperty( args: T ): TReadOnlyProperty<string> {
    const dependencies = _.uniq( [ this.bundleProperty, ...Object.values( args ).filter( isTReadOnlyProperty ) ] );
    return new FluentPatternDerivedProperty( dependencies, () => this.format( args ), this.targetProperty );
  }
}

/**
 * Adds support for targetProperty for phet-io studio autoselect.
 */
export class FluentPatternDerivedProperty extends DerivedStringProperty<string,
  IntentionalAny, IntentionalAny, IntentionalAny, IntentionalAny,
  IntentionalAny, IntentionalAny, IntentionalAny, IntentionalAny,
  IntentionalAny, IntentionalAny, IntentionalAny, IntentionalAny,
  IntentionalAny, IntentionalAny, IntentionalAny> {

  /**
   * @param dependencies
   * @param args
   * @param targetProperty - the target property that this FluentPatternDerivedProperty will be associated with, solely for phet-io studio autoselect, see Text and RichText.
   *                       - this will be undefined in a built simulation when the corresponding string is unused.
   */
  public constructor( dependencies: IntentionalAny, args: IntentionalAny, public readonly targetProperty: PhetioObject | undefined ) {
    super( dependencies, args );
  }
}

chipper.register( 'FluentPattern', FluentPattern );